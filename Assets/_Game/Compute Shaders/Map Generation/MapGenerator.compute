// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel GenerateMap
#include "Assets/Shader Headers/PerlinNoise.cginc"
#include "../Includes/Common.hlsl"

float2 offset;
float size;

Texture2D<float> Input;
RWStructuredBuffer<InstanceData> instancesData;
AppendStructuredBuffer<InstanceData> testBuffer;

float maxHeight;
uint width, height;

float4x4 QuatToMatrix(float4 q)
{
    float4x4 rotMat = float4x4
    (
        float4(1 - 2 * q.y * q.y - 2 * q.z * q.z, 2 * q.x * q.y + 2 * q.w * q.z, 2 * q.x * q.z - 2 * q.w * q.y, 0),
        float4(2 * q.x * q.y - 2 * q.w * q.z, 1 - 2 * q.x * q.x - 2 * q.z * q.z, 2 * q.y * q.z + 2 * q.w * q.x, 0),
        float4(2 * q.x * q.z + 2 * q.w * q.y, 2 * q.y * q.z - 2 * q.w * q.x, 1 - 2 * q.x * q.x - 2 * q.y * q.y, 0),
        float4(0, 0, 0, 1)
    );
    return rotMat;
}
 
float4x4 MakeTRSMatrix(float3 pos, float4 rotQuat, float3 scale)
{
    float4x4 rotPart = QuatToMatrix(rotQuat);
    float4x4 trPart = float4x4(float4(scale.x, 0, 0, 0), float4(0, scale.y, 0, 0), float4(0, 0, scale.z, 0), float4(pos, 1));
    float4x4 result = mul(rotPart, trPart); 
    return transpose(result);
}

[numthreads(8,8,8)]
void GenerateMap (uint3 id : SV_DispatchThreadID)
{
    float height = Input[id.xy] * 20;
    float2 center = float2(size / 2, size / 2);
    float2 dir = float2(id.xy) - center;
 
    InstanceData data = (InstanceData)0;
    uint index = id.x * 20 * 256 + id.y * 20 + id.z;
    if(id.z <= height){
        float2 a = offset + dir;

        float3 worldPos = float3(a.x, id.z, a.y);
        float4 rotation = float4(0,0,0,1);
        float3 scale = float3(1,1,1);

        float4x4 trs = MakeTRSMatrix(worldPos, rotation, scale);
        data.trs = trs;
        data.available = (int)(rand3dTo1d(worldPos) * 2) + 1;

        instancesData[index] = data;
    }
    else{
        data.available = 0;
        instancesData[index] = data;
    }

    // float2 a = offset + dir;

    // float3 worldPos = float3(a.x, id.z, a.y);
    // float4 rotation = float4(0,0,0,1);
    // float3 scale = float3(1,1,1);

    // float4x4 trs = MakeTRSMatrix(worldPos, rotation, scale);
    // data.trs = trs;
    // data.available = 1;

    // instancesData[id.x * 20 * 256 + id.y * 20 + id.z] = data;
    //testBuffer.Append(data);
    
}
