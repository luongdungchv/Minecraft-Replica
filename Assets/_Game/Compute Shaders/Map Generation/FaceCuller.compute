// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain
#include "../Includes/Common.hlsl"

RWStructuredBuffer<InstanceData> Input;
AppendStructuredBuffer<FaceData> Result;
AppendStructuredBuffer<InstanceData> testResult;

uint maxHeight, width, height;
float3 camPos, camForward;

int3 dirs[6];

[numthreads(8,8,8)]
void CSMain (int3 id : SV_DispatchThreadID)
{
    uint inputIndex = id.x * 20 * 256 + id.y * 20 + id.z;
    InstanceData input = Input[inputIndex];
    if(input.available == 0) return;
    for(uint i = 0; i < 6; i++){
        //float dotProd = dot(dirs[i], )
        float3 pos = input.trs._m03_m13_m23;
        if(dot(pos - camPos, camForward) < 0) continue;
        float3 dir = dirs[i];
        float y = dir.y;
        dir.y = dir.z;
        dir.z = y;
        float dotProd = dot(dir, camPos - pos);
        if(dotProd <= 0) continue;
        int3 adjID = id + dirs[i];

        if(adjID.x < 0 || adjID.y < 0 || adjID.z < 0 || adjID.x >= 256 || adjID.y >= 256){
            FaceData face = (FaceData)0;
            face.instanceIndex = inputIndex;
            face.vertexIndex = i;
            Result.Append(face);
            continue;
        }
        InstanceData ins = Input[adjID.x * 20 * 256 + adjID.y * 20 + adjID.z];
        if(!ins.available){
            FaceData face = (FaceData)0;
            face.instanceIndex = inputIndex;
            face.vertexIndex = i;
            Result.Append(face);
        }
        
    }
    // int3 adjID = id + dirs[1];
    // InstanceData ins = Input[adjID.x * 20 * 256 + adjID.y * 20 + adjID.z];
    // if(!ins.available){
    //     FaceData face = (FaceData)0;
    //     face.instanceIndex = inputIndex;
    //     face.vertexIndex = 4;
    //     Result.Append(face);
    // }
    // if(adjID.x < 0 || adjID.y < 0 || adjID.z < 0 || adjID.x >= 256 || adjID.y >= 256){
    //     FaceData face = (FaceData)0;
    //     face.instanceIndex = inputIndex;
    //     face.vertexIndex = 2;
    //     Result.Append(face);
    // }
    //testResult.Append(input);
}
